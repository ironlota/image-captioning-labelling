scalar DateTime

type Query {
  allUsers(skip: Int, limit: Int): [User]
  _allUsersMeta: Meta
  user(username: String!): User
}

type Mutation {
  createUser(createUserInput: createUserInput): User
  changePassword(oldPassword: String!, newPassword: String!): User
  editCaption(createEditCaption: createEditCaption): User
  curateCaption(createCurateCaption: createCurateCaption): User
  emotionCaption(createEmotionCaption: createEmotionCaption): User
  changeStep(objId: Int!, status: String!): User
  changeRange(range: String!): User
}

input createCurateCaption {
  obj_id: Int
  image_id: String
  curatedCaptions: [Int]
}

input createEditCaption {
  obj_id: Int
  image_id: String
  caption_id: Int
  text: String
}

input createEmotionCaption {
  obj_id: Int
  image_id: String
  happy: String
  sad: String
  angry: String
}

input createUserInput {
  username: String
  email: String
  password: String
  firstName: String
  lastName: String
}

type UserEditCaption {
  caption_id: Int
  text: String
}

type UserEmotionCaption {
  happy: String
  sad: String
  angry: String
}

type UserCaption {
  obj_id: Int
  image_id: String
  step: String
  curatedCaptions: [Int]
  captionEdit: [UserEditCaption]
  captionEmotion: UserEmotionCaption
}

type User {
  username: String
  email: String
  range: String
  captionEditCount: Int
  captionCuratedCount: Int
  captionEmotionCount: Int
  captions: [UserCaption]
  firstName: String
  lastName: String
  verified: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  lastLogin: DateTime
}
